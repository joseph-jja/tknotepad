#!/bin/sh
# the next line restarts using wish \
exec `which wish` "$0" "$@"

# Tk NotePad by Joseph Acosta
# default global values
global .
set winTitle "Tk NotePad"
set version "Version 0.8.2"
set BASENAME [string range $argv0 [expr [string last "/" $argv0] + 1] end]

# file status 
set fileName " "

# this variable is for the word wrap toggle on the menu
set wrappedText 0 

# setting the linenumber on startup
set gotolinenumber 1

# print command - you may need to change this
set printCommand lpr

# default colors
set BGCOLOR "white"
set FGCOLOR "black"

# modified text
set MODIFIED "Modified..."

# main window settings
eval destroy [winfo child .]
wm title . $winTitle
wm iconname . $winTitle
wm geometry . 45x25
wm minsize . 25 1 

#create main menu
menu .filemenu -tearoff 0 

# start by setting default font sizes 
if [ expr [string compare $tcl_platform(platform) "unix"] == 0 ] {
    set textFont -Adobe-Helvetica-*-R-Normal-*-14-*
    set menuFont -adobe-helvetica-bold-r-normal--12-*-75-75-*-*-*-*
} else {
    set textFont -Adobe-Courier-*-R-Normal-*-14-*
    set menuFont [.filemenu cget -font]
}
.filemenu configure -font $menuFont

# create frames for widget layout
# this is for the text widget and the y scroll bar
frame .bottomTopMenu
pack .bottomTopMenu  -side top -expand 1 -fill both
# where the text widget is packed
frame .bottomleftmenu
pack .bottomleftmenu -in .bottomTopMenu  -side left -expand 1 -fill both
# where the y scrollbar is packed
frame .bottomrightmenu 
pack  .bottomrightmenu -in .bottomTopMenu  -side right -expand 0 -fill both 
# this is for the x scroll bar at the bottom of the window
frame .bottombottommenu
pack .bottombottommenu -side bottom -expand 0 -fill both

#file menu
menu .filemenu.files -tearoff 0 -font $menuFont
.filemenu  add cascade -label "File" -underline 0 -menu .filemenu.files
.filemenu.files add command -label "New" -underline 0 -command "filesetasnew"
.filemenu.files add command -label "Open..." -underline 0 -command "filetoopen" -accelerator Ctrl+o
.filemenu.files add command -label "Save" -underline 0 -command "filetosave" -accelerator Ctrl+s
.filemenu.files add command -label "Save As..." -underline 5 -command "filesaveas"
.filemenu.files add separator
if {"$tcl_platform(platform)" == "unix"} {
    .filemenu.files add command -label "Print Setup..." -underline 8 -command "printseupselection"
    .filemenu.files add command -label "Print" -underline 0 -command "selectprint"
    .filemenu.files add separator
}
.filemenu.files add command -label "Exit" -underline 1 -command "exitapp"

#edit menu
menu .filemenu.edit -tearoff 0 -font $menuFont
.filemenu add cascade -label "Edit" -underline 0 -menu .filemenu.edit
.filemenu.edit add command -label "Undo" -underline 0 -command " undo_menu_proc" -accelerator Ctrl+z
.filemenu.edit add command -label "Redo" -underline 0 -command "redo_menu_proc" -accelerator Ctrl+y
.filemenu.edit add separator
.filemenu.edit add command -label "Cut" -underline 2 -command "cuttext" -accelerator Ctrl+x
.filemenu.edit add command -label "Copy" -underline 0 -command "copytext" -accelerator Ctrl+c
.filemenu.edit add command -label "Paste" -underline 0 -command "pastetext" -accelerator Ctrl+v
.filemenu.edit add command -label "Delete" -underline 2 -command "deletetext" -accelerator Del
.filemenu.edit add separator
.filemenu.edit add command -label "Select All" -underline 7 -command ".textarea tag add sel 1.0 end" -accelerator Ctrl+/
.filemenu.edit add command -label "Time/Date" -underline 5 -command "printtime"
.filemenu.edit add separator
.filemenu.edit add check -label "Word Wrap" -variable wrappedText -underline 5 -command "wraptext" 

#search menu
menu .filemenu.search -tearoff 0 -font $menuFont
.filemenu add cascade -label "Search" -underline 0 -menu .filemenu.search 
.filemenu.search add command -label "Find..." -underline 0 -command "findtext find" -accelerator Ctrl+f
.filemenu.search add command -label "Find Next" -underline 1 -command "findnext find" -accelerator F3
.filemenu.search add command -label "Replace..." -underline 0 -command "findtext replace" -accelerator Ctrl+r

# help menu
menu .filemenu.help -tearoff 0 -font $menuFont
.filemenu add cascade -label "Help" -underline 0 -menu .filemenu.help
.filemenu.help add command -label "Help" -underline 0 -command "helpme"
.filemenu.help add command -label "About" -underline 0 -command "aboutme"

# now make the menu visible
. configure -menu .filemenu 

#create text area
text .textarea -relief sunken -bd 2 -xscrollcommand ".xscroll set" -yscrollcommand ".yscroll set" \
                -wrap none -width 1 -height 1 -fg $FGCOLOR -bg $BGCOLOR -font $textFont -setgrid 1 \
	-undo 1 -autoseparators 1
scrollbar .yscroll -command ".textarea yview" 
scrollbar .xscroll -command ".textarea xview" -orient horizontal 
pack .textarea  -in  .bottomleftmenu -side left -expand 1 -fill both
pack .yscroll -in .bottomrightmenu -side right -expand 1 -fill both 
pack .xscroll -in .bottombottommenu -expand 1 -fill x  
focus .textarea

# build the status bar and line number system
set color [.filemenu cget -background]
entry .statusind -relief flat -state disabled -background $color
entry .modified -relief flat -state disabled -background $color
pack .modified -in .bottombottommenu -side left -expand 0
pack .statusind -in .bottombottommenu -side right -expand 0



# this proc just sets the title to what it is passed
proc settitle {WinTitleName} {
    global winTitle fileName
    wm title . "$winTitle - $WinTitleName"
    set fileName $WinTitleName
}

# proc to open files or read a pipe
proc openoninit {thefile} {
    if [string match " " $thefile] {  
        fconfigure stdin -blocking 0
        set incoming [read stdin 1]
        if [expr [string length $incoming] == 0] {
            fconfigure stdin -blocking 1
        } else {
            fconfigure stdin -blocking 1
            .textarea insert end $incoming
            while {![eof stdin]} {
                .textarea insert end [read -nonewline stdin]
            }
        }
    } else {
        if [ file exists $thefile ] {
            set newnamefile [open $thefile r]
        } else {
            set newnamefile [open $thefile a+]
        }
        while {![eof $newnamefile]} {
           .textarea insert end [read -nonewline $newnamefile ] 
        }
        close $newnamefile
        settitle $thefile
    }
}

# parse command line arguments
if ($argc>0) {
    for {set i 0} {$i <= $argc } {incr i} {
        if [ file exists [lindex $argv $i] ] {
        set nameFileToOpen [lindex $argv $i]
        openoninit $nameFileToOpen
        } else {
              set initvar  [lindex $argv $i]
              case $initvar {
                   -fg {
                         set FGCOLOR [lindex $argv [expr $i+1]]
             .textarea configure -fg $FGCOLOR
                         incr i }
                   -bg {
                         set BGCOLOR [lindex $argv [expr $i+1]]
             .textarea configure -bg $BGCOLOR
                         incr i }
                   -p {
                        set nameFileToOpen " " 
            openoninit $nameFileToOpen }
                   -f {
                        set nameFileToOpen [lindex $argv [expr $i+1]] 
            eval exec $BASENAME $nameFileToOpen -fg $FGCOLOR -bg $BGCOLOR &
                        incr i } 
                   -nf {
                        set nameFileToOpen [lindex $argv [expr $i+1]] 
            openoninit $nameFileToOpen
                        incr i }
                   -ww {
            set wrappedText 1
                         }
                   -gl {
            set gotolinenumber [lindex $argv [expr $i+1]]
                        incr i }
              }
        } 
    }
}

# because of a change in tcl / tk I now have to guess 
# how to set the cursor position
proc textSetCursor {pos} {
        if { [ catch { tkTextSetCursor .textarea $pos } ] } {
                catch { tk::TextSetCursor .textarea $pos }  
        }
}

# help menu
proc helpme {} {
    tk_messageBox -title "Basic Help" -type ok -message "This is a simple ASCII editor like many others. \
Please see the README.help and other documentation files for help." 
}

# about menu
proc aboutme {} {
        global winTitle version
    tk_messageBox -title "About" -type ok -message "$winTitle $version\n by Joseph Acosta."
}

# generic case switcher for message box
proc switchcase {yesfn nofn} {
    set saveTextMsg [ .textarea edit modified ]
    if [ expr [string compare $saveTextMsg 1] ==0 ] { 
    set answer [tk_messageBox -message "The contents of this file may have changed, do you wish to to save your changes?" \
    -title "New Confirm?" -type yesnocancel -icon question]
    case $answer {
         yes { if {[eval $yesfn] == 1} { $nofn } }
             no {$nofn }
    }
    } else {
       $nofn
    }
}

# new file
proc filesetasnew {} {
    switchcase filetosave setTextTitleAsNew
}

proc setTextTitleAsNew {} {
    global winTitle fileName
    .textarea delete 0.0 end
    set fileName " "
    wm title . $winTitle
    modifiedstatus 0
}

# kill main window
proc killwin {} {
    destroy .
}

# exit app
proc exitapp {} { 
    switchcase filetosave killwin
}

# bring up open win
proc showopenwin {} {
    set types {
    {"All files"        *}
    {"Text files"        *.txt}
    {"Tcl/Tk"        *.tcl}
    {"Tcl/Tk"        *.tk}
    }
    set file [tk_getOpenFile -filetypes $types -parent .]
    if [string compare $file ""] {
        setTextTitleAsNew
        openoninit $file
        modifiedstatus 0
    }
}

#open an existing file
proc filetoopen {} {
      switchcase filetosave showopenwin
}

# generic save function
proc writesave {nametosave} {
    set FileNameToSave [open $nametosave w+]
    puts -nonewline $FileNameToSave [.textarea get 0.0 end]
    close $FileNameToSave
    modifiedstatus 0
}

#save a file
proc filetosave {} {
    global fileName
    #check if file exists file
    if {[file exists $fileName ] && [ expr  [ string compare $fileName " "] != 0 ]} then {
    writesave $fileName
        return 1
    } else {
     return [eval filesaveas]
    }
}

#save a file as
proc filesaveas {} {
    set types {
    {"All files"        *}
    }
    set myfile [tk_getSaveFile -filetypes $types -parent . -initialfile Untitled]
     if { [expr [string compare $myfile ""]] != 0 } {
        if { [expr [string compare $myfile " "]] != 0 } {
            writesave  $myfile
            settitle $myfile
            return 1
        }
    }
    return 0
}

# proc to set child window position
proc setwingeom {wintoset} {
    wm resizable $wintoset 0 0
    set myx [expr (([winfo screenwidth .]/2) - ([winfo reqwidth $wintoset]))]
    set myy [expr (([winfo screenheight .]/2) - ([winfo reqheight $wintoset]/2))]
    wm geometry $wintoset +$myx+$myy
    set topwin [ winfo parent $wintoset ]
    if { [ winfo viewable [ winfo toplevel $topwin ] ] } {
        wm transient $wintoset $topwin
    }
}

# procedure to setup the printer
proc printseupselection {} {
    global printCommand
    set print .print
    catch {destroy $print}
    toplevel $print
    wm title $print "Print Setup"
    setwingeom $print
    frame $print.top 
    frame $print.bottom
    label $print.top.label -text "Print Command: "
    entry $print.top.print -textvariable printsetupnew -width 40
    $print.top.print delete 0 end
    set printvar $printCommand 
    $print.top.print insert 0 $printvar
    button $print.bottom.ok -text "OK" -command "addtoprint $print"
    button $print.bottom.cancel -text "Cancel" -command "destroy $print"

    pack $print.top -side top -expand 0 
    pack $print.bottom -side bottom -expand 0 
    pack $print.top.label $print.top.print -in $print.top -side left -fill x -fill y
    pack $print.bottom.ok $print.bottom.cancel -in $print.bottom -side left -fill x -fill y
    bind $print <Return> "addtoprint $print"
    bind $print <Escape> "destroy $print"

    proc addtoprint {prnt} {
         global printCommand
         set printCommand [$prnt.top.print get]
         destroy $prnt
    }
}

# procedure to print
proc selectprint {} {
    set TempPrintFile [open /tmp/tkpadtmpfile w]
    puts -nonewline $TempPrintFile [.textarea get 0.0 end]
    close $TempPrintFile
    global printCommand
    set prncmd $printCommand    
    eval exec $prncmd /tmp/tkpadtmpfile
    eval exec rm -f /tmp/tkpadtmpfile
}

#cut text procedure
proc deletetext {} {
    set cuttexts [selection own]
    if {$cuttexts != "" } {
        $cuttexts delete sel.first sel.last
        selection clear
    }
    modifiedstatus 1
}

#cut text procedure
proc cuttext {} {
    tk_textCut .textarea
    modifiedstatus 1
}

#copy text procedure
proc copytext {} {
    tk_textCopy .textarea
    modifiedstatus 1
}

#paste text procedure
proc pastetext {} {
    global tcl_platform
    if {"$tcl_platform(platform)" == "unix"} {
        catch {
        .textarea delete sel.first sel.last
        }
    }
    tk_textPaste .textarea
    modifiedstatus 1
}

proc FindIt {w} {
    global SearchString SearchPos SearchDir findcase tk_version
    .textarea tag configure sel -background green
    if {$SearchString!=""} {
        if {$findcase=="1"} {
             set caset "-exact"
        } else {
            set caset "-nocase"
        }
        if {$SearchDir == "forwards"} {
            set limit end
        } else {
            set limit 1.0
        }
        set SearchPos [ .textarea search -count len $caset -$SearchDir $SearchString $SearchPos $limit]
        set len [string length $SearchString]
        if {$SearchPos != ""} {
                    .textarea see $SearchPos
                textSetCursor $SearchPos
            .textarea tag add sel $SearchPos  "$SearchPos + $len char"
                    
            if {$SearchDir == "forwards"} {
                        set SearchPos "$SearchPos + $len char"
            }         
                    } else {
                       set SearchPos "0.0"
                  }
     }
    focus .textarea
}

proc ReplaceIt {} {
    global SearchString SearchDir ReplaceString SearchPos findcase
    if {$SearchString != ""} {
        if {$findcase=="1"} {
        set caset "-exact"
        } else {
        set caset "-nocase"
        }
        if {$SearchDir == "forwards"} {
        set limit end
        } else {
        set limit 1.0
        }
        set SearchPos [ .textarea search -count len $caset -$SearchDir $SearchString $SearchPos $limit]
        set len [string length $SearchString]
        if {$SearchPos != ""} {
                .textarea see $SearchPos
                       .textarea delete $SearchPos "$SearchPos+$len char"
                .textarea insert $SearchPos $ReplaceString
        if {$SearchDir == "forwards"} {
                    set SearchPos "$SearchPos+$len char"
        }         
        } else {
               set SearchPos "0.0"
        }
    }
    modifiedstatus 1
}

proc ReplaceAll {} {
      global SearchPos SearchString
       if {$SearchString != ""} {
                ReplaceIt
    while {$SearchPos!="0.0"} {
        ReplaceIt
    }
       }
}

proc CancelFind {w} {
    .textarea tag delete tg1
    destroy $w
}

proc ResetFind {} {
    global SearchPos
    set SearchPos insert
}

# procedure to find text
proc findtext {typ} {
    global SearchString SearchDir ReplaceString findcase c find
                set selectedText [ selection own ]
                # try to get the selection and set the search string to the selection
    if { "$selectedText" != "" } {
        catch { set SearchString [ .textarea get sel.first sel.last ] }
                }
    set find .find
    catch {destroy $find}
    toplevel $find
    wm title $find "Find"
    setwingeom $find
    ResetFind
    frame $find.l
    frame $find.l.f1
    label $find.l.f1.label -text "Find what:" -width 11  
    entry $find.l.f1.entry  -textvariable SearchString -width 30 
    pack $find.l.f1.label $find.l.f1.entry -side left
    $find.l.f1.entry selection range 0 end
    if {$typ=="replace"} {
        frame $find.l.f2
        label $find.l.f2.label2 -text "Replace with:" -width 11
        entry $find.l.f2.entry2  -textvariable ReplaceString -width 30 
        pack $find.l.f2.label2 $find.l.f2.entry2 -side left
        pack $find.l.f1 $find.l.f2 -side top
    } else {
        pack $find.l.f1
    }
    frame $find.f2
    button $find.f2.button1 -text "Find Next" -command "FindIt $find" -width 10 -height 1 -underline 5 
    button $find.f2.button2 -text "Cancel" -command "CancelFind $find" -width 10 -underline 0
    if {$typ=="replace"} {
        button $find.f2.button3 -text "Replace" -command ReplaceIt -width 10 -height 1 -underline 0
        button $find.f2.button4 -text "Replace All" -command ReplaceAll -width 10 -height 1 -underline 8        
        pack $find.f2.button3 $find.f2.button4 $find.f2.button2  -pady 4
    } else {
        pack $find.f2.button1 $find.f2.button2  -pady 4
    }
    frame $find.l.f4
    frame $find.l.f4.f3 -borderwidth 2 -relief groove
    radiobutton $find.l.f4.f3.up -text "Up" -underline 0 -variable SearchDir -value "backwards" 
    radiobutton $find.l.f4.f3.down -text "Down"  -underline 0 -variable SearchDir -value "forwards" 
    $find.l.f4.f3.down invoke
    pack $find.l.f4.f3.up $find.l.f4.f3.down -side left 
    checkbutton $find.l.f4.cbox1 -text "Match case" -variable findcase -underline 0 
    pack $find.l.f4.cbox1 $find.l.f4.f3 -side left -padx 10
    pack $find.l.f4 -pady 11
    pack $find.l $find.f2 -side left -padx 1
    bind $find <Escape> "destroy $find"

     # each widget must be bound to th eevents of the other widgets
     proc bindevnt {widgetnm types find} {
    if {$types=="replace"} {
        bind $widgetnm <Return> "ReplaceIt"
        bind $widgetnm <Control-r> "ReplaceIt"
        bind $widgetnm <Control-a> "ReplaceAll"
    } else {
        bind $widgetnm <Return> "FindIt $find"
        bind $widgetnm <Control-n> "FindIt $find"
    }
    bind $widgetnm <Control-m> { $find.l.f4.cbox1 invoke }
    bind $widgetnm <Control-u> { $find.l.f4.f3.up invoke }
    bind $widgetnm <Control-d> { $find.l.f4.f3.down invoke }
     }
    if {$typ == "replace"} {
           bindevnt $find.f2.button3 $typ $find
        bindevnt $find.f2.button4 $typ $find
    } else {
        bindevnt $find.f2.button1 $typ $find
              bindevnt $find.f2.button2 $typ $find
    }
        bindevnt $find.l.f4.f3.up  $typ $find
        bindevnt $find.l.f4.f3.down $typ $find
        bindevnt $find.l.f4.cbox1 $typ $find
    bindevnt $find.l.f1.entry $typ $find    
    bind $find <Control-c> "destroy $find"
    focus $find.l.f1.entry
    grab $find
}

# proc for find next
proc findnext {typof} {
    global SearchString SearchDir ReplaceString findcase c find
    if [catch {expr [string compare $SearchString "" ] }] {
        findtext $typof
    } else {
         FindIt $find
    }
}

#procedure to set the time change %R to %I:%M for 12 hour time display
proc printtime {} {
.textarea insert insert [clock format [clock seconds] -format "%R %p %D"]
modifiedstatus 1
}

# binding for wordwrap
proc wraptext {} {
    set wordWrap [ .textarea cget -wrap ]
    if [expr [string compare $wordWrap word] == 0] {
    set wordWrap none    
    } else {
    set wordWrap word
    }
    .textarea configure -wrap $wordWrap
}

# in case someone uses the menu to undo
proc undo_menu_proc {} {
    catch { .textarea edit undo }
     undo_proc
}

# control z is already bound to undo the text, so we just have ctrl-z add a separator
proc undo_proc {} {
    .textarea edit separator
    modifiedstatus 1
}

proc redo_menu_proc {} {
    catch { .textarea edit redo }
    # do I need to add a separator here?  probably not
    .textarea edit separator
    modifiedstatus 1
}

# popup menu function
proc showpopup {} {
    set numx [winfo pointerx .]
    set numy [winfo pointery .]
    tk_popup .filemenu.edit $numx $numy
}

# this proc gets the position
# then sets the statusbar line and column position
proc keyposn {} {
    .statusind configure -state normal
    set indexin [.textarea index insert]
    .statusind delete 0 end
    .statusind insert 0 "line.column $indexin"
    .statusind configure -state disabled
    set isChanged [ .textarea edit modified ]
    if { $isChanged == 1 } { modifiedstatus 1 }
}

# this proc shows if the file is modifed or not
# is changed is either space or modified
# is also sets the text widget to be modified or not
proc modifiedstatus { ischanged } {
    global MODIFIED
    .modified configure -state normal
    .modified delete 0 end
    if [ expr [ string compare "$ischanged" "1" ] == 0  ] {
        .modified insert 0 $MODIFIED
    } else {
        .modified insert 0 " "
    }
    .modified configure -state disabled
    .textarea edit modified $ischanged
}


# catch the kill of the windowmanager
wm protocol . WM_DELETE_WINDOW exitapp

# because windows is 'different' and mac is unknown
if [ expr [string compare $tcl_platform(platform) "unix"] ==0] {
    #events
    set tk_strictMotif 0
    event delete <<Cut>> <Control-x>
    event delete <<Paste>> <Control-v>
    event delete <<Paste>> <Control-Key-y>
    # more bindings
    bind Text <Control-v> {}
    bind .textarea <Control-v> {pastetext}
}

#bindings
bind All <Alt-F> {}
bind All <Alt-E> {}
bind All <Alt-S> {}
bind ALL <Alt-H> {}
bind . <F3> {findnext find}
bind . <Control-x> {cuttext}
bind . <Control-c> {copytext}
bind . <Control-s> {filetosave}
bind Text <Control-o> {}
bind Text <Control-f> {}
bind . <Control-o> {filetoopen}
bind . <Control-z> {undo_proc}
bind . <Control-y> {redo_menu_proc}
bind . <Control-f> {findtext find}
bind . <Control-r> {findtext replace}

# in tck/tk 8.4 there is now a built in undo/redo 
# this binds the KeyPress to automatically add an undo / redo separator to that 
# this allows each key stroke to be undone
bind .textarea <KeyPress> { .textarea edit separator }

# set new bindings
bind .textarea <KeyRelease> {keyposn}
bind .textarea <ButtonRelease> {keyposn}

# for the popup menu we bind both buttons 2 and 3
bind .textarea <Button-2> {showpopup}
bind .textarea <Button-3> {showpopup}


# this it to turn on text wrapping if the -ww option is passed
if { $wrappedText } { 
    wraptext
}

textSetCursor "1.0"
keyposn

# add new menu option 
.filemenu.search add command -label "Goto Line" -underline 0 -command "gotoline" 

proc gotoline {} {
	set gotln .gotln
	catch {destroy $gotln}
	toplevel $gotln
	wm title $gotln "Goto Line?"
	setwingeom $gotln
	frame $gotln.top 
	frame $gotln.bottom
	label $gotln.top.label -text "Goto Line: "
	entry $gotln.top.gotln -textvariable gotlnsetupnew -width 10
	$gotln.top.gotln delete 0 end 
	button $gotln.bottom.ok -text "OK" -command "addtogotln $gotln"
	button $gotln.bottom.cancel -text "Cancel" -command "destroy $gotln"
	focus $gotln.top.gotln
	pack $gotln.top -side top -expand 0 
	pack $gotln.bottom -side bottom -expand 0 
	pack $gotln.top.label $gotln.top.gotln -in $gotln.top -side left -fill x -fill y
	pack $gotln.bottom.ok $gotln.bottom.cancel -in $gotln.bottom -side left -fill x -fill y
	bind $gotln <Return> "addtogotln $gotln"
	bind $gotln <Escape> "destroy $gotln"

    proc addtogotln {prnt} {
         global gotlnCommand
         set gotlnCommand [$prnt.top.gotln get]
	 textSetCursor "$gotlnCommand.0"
         catch {keyposn}
         destroy $prnt
    }
}

# here we see if the user passed the gl option and set the line numer
# we also check to see if we need to set the key position
# however if the user did not include line number patch we must catch the error
# of calling a function that may not exist
if { 0 != $gotolinenumber } {
	textSetCursor "$gotolinenumber.0"
		 catch { keyposn } {} 
}

.filemenu.files delete last

.filemenu.files add command -label "New Window" -underline 4 -command "eval exec $BASENAME &"
.filemenu.files add separator

.filemenu.files add command -label "Exit" -underline 1 -command "exitapp"


# patch for adding some rpm spec file creation code

menu .filemenu.rpm -tearoff 0
.filemenu add cascade -label "RPM" -underline 0 -menu .filemenu.rpm
.filemenu.rpm add command -label "New spec file" -underline 0 -command "insertspec"
.filemenu.rpm add command -label "%define" -command " insertSPECtag %define"
.filemenu.rpm add command -label "%prep" -command " insertSPECtag %prep"
.filemenu.rpm add command -label "%setup" -command " insertSPECtag %setup"
.filemenu.rpm add command -label "%description" -command " insertSPECtag %description"
.filemenu.rpm add command -label "%install" -command " insertSPECtag %install"
.filemenu.rpm add command -label "%files" -command " insertSPECtag %files"
.filemenu.rpm add command -label "%doc" -command " insertSPECtag %doc"
.filemenu.rpm add command -label "%clean" -command " insertSPECtag %clean"

proc insertnewspec {} {
	setTextTitleAsNew

	.textarea insert 1.0 "%define name\n%define version\n%define release \
		\n%define packager\n\nSummary:\nName: %{name}\nVersion: %{version} \
		\nRelease: %{release}\nCopyright:\nGroup:\nSource: %{name}-%{version}.tar.gz \
		\nSource1:\nPatch:\nBuildroot: /tmp/%{name}-build\nURL:\n \
		\n%description\n\n%prep\n\n%setup\n\n%patch\n\n%build\n\n%install\n \
		\n%clean\n\n%files\n\n%doc\n\n%changelog\n"
	
	textSetCursor "1.0"
	keyposn
}

proc insertspec {} {
	switchcase filetosave insertnewspec
}

proc insertSPECtag { specTag } {
	deletetext
	.textarea insert insert $specTag
}
