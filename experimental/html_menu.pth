# HTML menu ########################################

menu .filemenu.html -tearoff 0
.filemenu add cascade -label "HTML" -underline 0 -menu .filemenu.html

# Procedure to insert starting and ending codes
# and put cursor in the right place
proc dualcodes {} {
	global codestart codend tagonsel
	set tagonsel [.textarea dump -tag 1.0 end]
	if { [string first "tagon sel" $tagonsel] == -1 } {
		.textarea insert insert "$codestart$codend"
		set goback [string length $codend]
 		.textarea mark set insert "[.textarea index insert] - $goback chars"
	} else {
		.textarea insert sel.first $codestart
		.textarea insert sel.last $codend
		set goforth [string length $codend]
		.textarea mark set insert "sel.last + $goforth chars"
	}	
	selection clear
	savecheck
}

# HTML -- Convert to HTML

.filemenu.html add command -label "Convert to HTML" -underline 0 \
	-command "convert_to_html"

proc convert_to_html {} {
	# get the original text
	set originalText [.textarea get 1.0 end]
	# new HTML file
	new_html
	# will need to find all the cr and replace with br
	# then add back in the cr
	# <!--Contents of document (to be displayed in main browser\
	#                 window) go in space below>
	set result [ .textarea search elide "\n" ]
	if { [string match $exitanswer cancel] == 0 } {
		.textarea insert 16.0 $textutnunc\n
		set lastend [.textarea index end]
		set lastnums [split $lastend .]
		set lastline [lindex $lastnums 0]
		set lastbutfour [expr $lastline - 4]
		.textarea mark set insert 16.0
		.textarea insert 16.0 "<P>"
		line_number
		while { $lineno < $lastbutfour } {
			set getline [expr $lineno + 1]
			set nextline [expr $getline + 1]
			set linfin [.textarea index "$getline.0 lineend"]
			if { [expr $linfin - $getline.0] == 0.0 } {
				.textarea insert $nextline.0 "<P>"
			}
			set parvelnon [.textarea get $getline.0 $linfin]
			if { [string first "<P>" $parvelnon] == -1 } {
				if { [string match $parvelnon ""] == 0 } {
					.textarea insert $getline.0 "<BR>"
				}
			}
			incr lineno
		}
		.textarea mark set insert 7.0
		savecheck
	}
}

.filemenu.html add separator

# HTML -- Heading

.filemenu.html add command -label "Heading" -underline 0 \
	-command headingbox -accelerator F12

set headingsize H1

# Procedure to set up heading selection box:
proc headingbox {} {
	global headingsize
	toplevel .headingbox
	wm title .headingbox "HTML Heading"
	tk_setPalette background bisque selectBackground cyan
	label .headingbox.text -text "Heading Text:"
	entry .headingbox.enterhere -width 50 -bg white
	label .headingbox.size -text "Heading Size:"
	tk_optionMenu .headingbox.sizemenu headingsize H1 H2 H3 H4 H5 H6
	button .headingbox.insert -text "Insert" -default active \
		-command insert_heading
	button .headingbox.cancel -text "Cancel" -default normal \
		-command { destroy .headingbox }
	grid config .headingbox.text -row 0  -column 0 -sticky news
	grid config .headingbox.enterhere -row 0  -column 1 -columnspan 3 -sticky news
	grid config .headingbox.size -row 1  -column 0  -sticky news
	grid config .headingbox.sizemenu -row 1  -column 1  -sticky news
	grid config .headingbox.insert -row 1  -column 2 -sticky news
	grid config .headingbox.cancel -row 1  -column 3 -sticky news
	bind .headingbox <Key-Return> { insert_heading }
	focus .headingbox.enterhere
}
bind . <F12> { headingbox }

# Procedure to insert heading in HTML code:
proc insert_heading {} {
	global codestart codend headingsize tagonsel
	set codestart "<$headingsize>"
	set codend "</$headingsize>"
	dualcodes
	set headingtext [.headingbox.enterhere get]
	if { $headingtext != "" } {
		.textarea insert insert $headingtext
	}
	destroy .headingbox
}

# HTML -- Font

.filemenu.html add command -label "Font" -underline 0 \
	-command fontbox -accelerator Shift+F12

set html_fontsize 0
set html_fontcolor ""
set colorcall ""

proc dumpboxes {} {
	if { [winfo exists .colorbox] } { destroy .colorbox	}
	destroy .fontbox
}

# Procedure to set up font selection box:
proc fontbox {} {
	global color html_fontsize html_fontcolor colorcall
	toplevel .fontbox
	wm title .fontbox "HTML Font"
	tk_setPalette background bisque selectBackground cyan
	label .fontbox.size -text "Font Size:"
	tk_optionMenu .fontbox.sizemenu html_fontsize "-2" "-1" "0" "+1" "+2" "+3" "+4"
	label .fontbox.color -text "Font Color:"
	label .fontbox.colornum -width 12 -textvariable color
	button .fontbox.select -text "Open Color Selector" -command {
		if { [string match $colorcall ""] == 0 } { set colorcall "" }
		colorbox
	}
	button .fontbox.insertcolor -text "Insert Color" -command insert_fontcolor
	button .fontbox.insertsize -text "Insert Size" -command insert_fontsize
	button .fontbox.insertboth -text "Insert Size + Color" \
		-command insert_sizencolor
	button .fontbox.cancel -text "Cancel" -command dumpboxes		
	grid config .fontbox.size -row 0  -column 0 -sticky news
	grid config .fontbox.sizemenu -row 0  -column 1  -sticky news
	grid config .fontbox.color -row 0  -column 2 -sticky news
	grid config .fontbox.colornum -row 0  -column 3 -sticky news
	grid config .fontbox.select -row 1  -column 0 -columnspan 3 -sticky news
	grid config .fontbox.insertcolor -row 1  -column 3 -sticky news
	grid config .fontbox.insertsize -row 2  -column 0 -sticky news
	grid config .fontbox.insertboth -row 2  -column 1 -columnspan 2 -sticky news
	grid config .fontbox.cancel -row 2  -column 3 -sticky news
}

# Procedure to insert font color in HTML code:
proc insert_fontcolor {} {
	global codestart codend color html_fontcolor
	set html_fontcolor $color
	set codestart "<FONT COLOR=\"$html_fontcolor\">"
	set codend "</FONT>"
	dualcodes
	dumpboxes
}

# Procedure to insert font size in HTML code:
proc insert_fontsize {} {
	global codestart codend html_fontsize
	set codestart "<FONT SIZE=\"$html_fontsize\">"
	set codend "</FONT>"
	dualcodes
	dumpboxes
}

# Procedure to insert font size and color in HTML code:
proc insert_sizencolor {} {
	global codestart codend color html_fontsize html_fontcolor
	set html_fontcolor $color
	set codestart "<FONT SIZE=\"$html_fontsize\" COLOR=\"$html_fontcolor\">"
	set codend "</FONT>"
	dualcodes
	dumpboxes
}

bind . <Shift-F12> { fontbox }

.filemenu.html add separator

# HTML -- Anchor

.filemenu.html add command -label "Anchor" -underline 0 \
	-command "anchorbox" -accelerator Shift+F7

set lastanchor ""

proc anchorbox {} {
	toplevel .anchorbox
	wm title .anchorbox "HTML Anchor"
	tk_setPalette background bisque selectBackground cyan
	label .anchorbox.name -text "Name:"
	entry .anchorbox.enterhere -width 25 -bg white
	button .anchorbox.insert -text "Insert" -default active \
		-command insert_anchor
	button .anchorbox.cancel -text "Cancel" -default normal \
		-command { destroy .anchorbox }
	grid config .anchorbox.name .anchorbox.enterhere \
		.anchorbox.insert .anchorbox.cancel
	bind .anchorbox.enterhere <Key-Return> { insert_anchor }
	focus .anchorbox.enterhere
}

proc insert_anchor {} {
	global lastanchor codestart codend
	set lastanchor [.anchorbox.enterhere get]
	set codestart "<A NAME=\"\#$lastanchor\">"
	set codend </A>
	dualcodes
	destroy .anchorbox
}

bind . <Shift-F7> { anchorbox }

# HTML -- Link

.filemenu.html add command -label "Link" -underline 3 \
	-command "linkbox" -accelerator F7

set linktype "http://www."

# Procedure to set up link entry box:
proc linkbox {} {
	global linktype lastanchor
	toplevel .linkbox
	wm title .linkbox "Link"
	tk_setPalette background bisque selectBackground cyan
	label .linkbox.linkurl -text "Link to URL:"
	entry .linkbox.linkhere -width 60 -bg white
	.linkbox.linkhere insert 0 $linktype
	label .linkbox.showname -text "Show name:"
	entry .linkbox.namehere -width 60 -bg white
	button .linkbox.www -text "WWW" -default normal -command {
		if { [string match $linktype "http://www."] == 0 } {
			set linktype "http://www."
			.linkbox.linkhere delete 0 end
			.linkbox.linkhere insert 0 $linktype
		}
	}
	button .linkbox.email -text "E-mail" -default normal -command {
		if { [string match $linktype "mailto:"] == 0 } {
			set linktype "mailto:"
			.linkbox.linkhere delete 0 end
			.linkbox.linkhere insert 0 $linktype
		}
	}
	button .linkbox.ftp -text "FTP" -default normal -command {
		if { [string match $linktype "ftp://"] == 0 } {
			set linktype "ftp://"
			.linkbox.linkhere delete 0 end
			.linkbox.linkhere insert 0 $linktype
		}
	}
	button .linkbox.anchor -text "Anchor" -default normal -command {
		if { [string match $linktype "#"] == 0 } {
			set linktype "#"
			.linkbox.linkhere delete 0 end
			.linkbox.linkhere insert 0 $linktype$lastanchor
		}
	}
	button .linkbox.other -text "Other" -default normal -command {
		if { [string match $linktype ""] == 0 } {
			set linktype ""
			.linkbox.linkhere delete 0 end
		}
	}
	button .linkbox.insert -text "Insert Link" -default active \
		-command insert_link
	button .linkbox.cancel -text "Cancel" -default normal \
		-command { destroy .linkbox }
	grid config .linkbox.linkurl -row 0 -column 0 -sticky news
	grid config .linkbox.linkhere -row 0 -column 1 \
		-columnspan 6 -sticky news
	grid config .linkbox.showname -row 1 -column 0 \
		-columnspan 1 -sticky news
	grid config .linkbox.namehere -row 1 -column 1 \
		-columnspan 6 -sticky news
	grid config .linkbox.www -row 2 -column 0 -sticky news
	grid config .linkbox.email -row 2 -column 1 -sticky news
	grid config .linkbox.ftp -row 2 -column 2 -sticky news
	grid config .linkbox.anchor -row 2  -column 3  -sticky news
	grid config .linkbox.other -row 2 -column 4 -sticky news
	grid config .linkbox.insert -row 2 -column 5 -sticky news
	grid config .linkbox.cancel -row 2 -column 6 -sticky news
	bind .linkbox.linkhere <Key-Return> { insert_link }
	bind .linkbox.namehere <Key-Return> { insert_link }
	focus .linkbox.linkhere
}

# Procedure to insert link:

proc insert_link {} {
	global linktype codestart codend
	set link_place [.textarea index insert]
	set link_id [.linkbox.linkhere get]
	set link_name [.linkbox.namehere get]
	set codestart "<A HREF=\"$link_id\">"
	set codend </A>
	dualcodes
	if { [string match $link_name ""] == 0 } {
		.textarea insert insert $link_name
	}
	destroy .linkbox
}

bind . <F7> { linkbox }

.filemenu.html add separator

# HTML -- Image

.filemenu.html add command -label "Image" -underline 1 \
	-command "imagebox"

set alignimage LEFT


proc imagebox {} {
	global alignimage
	toplevel .imagebox
	wm title .imagebox "Insert Image"
	tk_setPalette background bisque selectBackground cyan
	label .imagebox.filename -text "Image file name:"
	entry .imagebox.enterhere -width 40 -bg white
	label .imagebox.alignment -text "Alignment:"
	tk_optionMenu .imagebox.alignimage alignimage \
		LEFT RIGHT TOP MIDDLE BOTTOM
	label .imagebox.optinfo -text "O P T I O N A L   I N F O R M A T I O N :" -pady 4
	label .imagebox.alt -text "Image description:"
	entry .imagebox.altinhere -width 60 -bg white
	label .imagebox.horspace -text "Spacing: Horiz"
	entry .imagebox.horizhere -width 2 -bg white
	label .imagebox.vertspace -text "Vert"
	entry .imagebox.vertinhere -width 2 -bg white
	label .imagebox.height -text "Height"
	entry .imagebox.heightinhere -width 4 -bg white
	label .imagebox.width -text "Width"
	entry .imagebox.widthinhere -width 4 -bg white
	label .imagebox.bordo -text "Border"
	entry .imagebox.bordohere -width 2 -bg white
	label .imagebox.allinpixels -text "(all in pixels)"
	button .imagebox.insert -text "Insert" -default active -command insert_image
	button .imagebox.cancel -text "Cancel" -default normal \
		-command { destroy .imagebox }
	grid config .imagebox.filename -row 0  -column 0  -columnspan 2 -sticky news
	grid config .imagebox.enterhere -row 0  -column 2 -columnspan 9  -sticky news
	grid config .imagebox.alignment -row 0  -column 10 -columnspan 2  -sticky news
	grid config .imagebox.alignimage -row 0  -column 12  -sticky news
	grid config .imagebox.optinfo -row 1  -column 0 -columnspan 13 -sticky news
	grid config .imagebox.alt -row 2  -column 0  -columnspan 2 -sticky news
	grid config .imagebox.altinhere -row 2  -column 2 -columnspan 11  -sticky news
	grid config .imagebox.horspace -row 3  -column 0  -sticky news
	grid config .imagebox.horizhere -row 3  -column 1  -sticky news
	grid config .imagebox.vertspace -row 3  -column 2  -sticky news
	grid config .imagebox.vertinhere -row 3  -column 3  -sticky news
	grid config .imagebox.height -row 3  -column 4  -sticky news
	grid config .imagebox.heightinhere -row 3  -column 5  -sticky news
	grid config .imagebox.width -row 3  -column 6  -sticky news
	grid config .imagebox.widthinhere -row 3  -column 7  -sticky news
	grid config .imagebox.bordo -row 3  -column 8  -sticky news
	grid config .imagebox.bordohere -row 3  -column 9  -sticky news
	grid config .imagebox.allinpixels -row 3  -column 10 -columnspan 3 -sticky news
	grid config .imagebox.insert -row 4  -column 0 -columnspan 7  -sticky news
	grid config .imagebox.cancel -row 4  -column 7 -columnspan 6  -sticky news
	bind .imagebox <Key-Return> { insert_image }
	focus .imagebox.enterhere
}

proc insert_image {} {
	global alignimage codestart codend
	set img_src [.imagebox.enterhere get]
	set alttext [.imagebox.altinhere get]
	set image_hspace [.imagebox.horizhere get]
	set image_vspace [.imagebox.vertinhere get]
	set imageheight [.imagebox.heightinhere get]
	set imagewidth [.imagebox.widthinhere get]
	set imagebordo [.imagebox.bordohere get]
	if { [string match $alttext ""] == 0 } { set alttext "ALT=\"$alttext\""}
	if { [string match $image_hspace ""] == 0 } {
		set image_hspace " HSPACE=\"$image_hspace\""
	}
	if { [string match $image_vspace ""] == 0 } {
		set image_vspace " VSPACE=\"$image_vspace\""
	}
	if { [string match $imageheight ""] == 0 } {
		set imageheight " HEIGHT=\"$imageheight\"" 
	}
	if { [string match $imagewidth ""] == 0 } {
		set imagewidth " WIDTH=\"$imagewidth\""
	}
	if { [string match $imagebordo ""] == 0 } {
		set imagebordo " BORDER=\"$imagebordo\""
	}
	.textarea insert insert "<IMG SRC=\"$img_src\" ALIGN=\"$alignimage\" $alttext\
		 $image_hspace$image_vspace$imageheight$imagewidth$imagebordo>"
	destroy .imagebox
}

.filemenu.html add separator

# HTML -- List

.filemenu.html add command -label "List" -underline 2 -command "html_list"

set listtype 1
set liston 0

# Procedure to set up list item entry box:
proc html_list {} {
	global listtype liston
	if { $liston == 1 } { set liston 0 }
	toplevel .html_list
	wm title .html_list "HTML List"
	tk_setPalette background bisque selectBackground cyan
	label .html_list.item -text "Item:"
	entry .html_list.itemhere -width 48 -bg white
	label .html_list.style -text "Style:"
	tk_optionMenu .html_list.choices listchoice "1-2-3" "A-B-C" "a-b-c" \
		"I-II-III" "i-ii-iii" "Discs" "Circles" "Squares"
	button .html_list.insert -text "Insert" -default active -command insert_item
	button .html_list.done -text "Done" -default normal -command {
		set liston 0
		line_number
		set godown [expr $lineno + 3]
		.textarea mark set insert $godown.0
		destroy .html_list
	}
	grid config .html_list.item -row 0  -column 0  -sticky news
	grid config .html_list.itemhere -row 0  -column 1 -columnspan 3 -sticky news
	grid config .html_list.style -row 1 -column 0 -sticky news
	grid config .html_list.choices -row 1  -column 1  -sticky news
	grid config .html_list.insert -row 1  -column 2  -sticky news
	grid config .html_list.done -row 1  -column 3  -sticky news
	focus .html_list.itemhere
	bind .html_list.itemhere <Key-Return> { insert_item }
}

# Procedure to create list and insert items:
proc insert_item {} {
	global listchoice listtype liston codestart codend ordo
	set list_item [.html_list.itemhere get]
	if { $liston == 0 } {
		switch $listchoice {
			"1-2-3" {set listtype 1 ; set ordo 1}
			"A-B-C" {set listtype A ; set ordo 1}
			"a-b-c" {set listtype a ; set ordo 1}
			"I-II-III" {set listtype I ; set ordo 1}
			"i-ii-iii" {set listtype i ; set ordo 1}
			"Discs" {set listtype DISC ; set ordo 0}
			"Circles" {set listtype CIRCLE ; set ordo 0}
			"Squares" {set listtype SQUARE ; set ordo 0}
		}
		if { $ordo == 1 } {
			set codestart "<OL TYPE=$listtype>\n\t<LI>"
			set codend "\n</OL>"
		} else {
			set codestart "<UL TYPE=$listtype>\n\t<LI>"
			set codend "\n</UL>"
		}
		set liston 1
	} else {
		set codestart "\n\t<LI>"
		set codend ""
	}
	dualcodes
	if { $list_item != "" } {
		.textarea insert insert $list_item
	}
	.html_list.itemhere delete 0 end
	focus .html_list.itemhere
}

# HTML -- Table

.filemenu.html add command -label "Table" -underline 0 -command "tablebox"

# Procedure to create Table Setup box:
proc tablebox {} {
	global color tablecolor blankrows blankcols
	toplevel .tablebox
	wm title .tablebox "HTML Table Setup"
	tk_setPalette background bisque selectBackground cyan
	button .tablebox.withdata -text "Make table, enter data" -default active \
		-command { get_tablecodes ; databox ; destroy .tablebox	}
	button .tablebox.nodata -text "Make table, no data" -default normal \
		-command { get_tablecodes ; nodatabox ; destroy .tablebox }
	button .tablebox.cancel -text "Cancel" -default normal \
		-command { destroy .tablebox }
	label .tablebox.optinfo -text "O P T I O N A L   I N F O R M A T I O N :" -pady 4
	label .tablebox.sum -text "Table summary:"
	entry .tablebox.suminhere -width 40 -bg white
	label .tablebox.horspace -text "Spacing: Horiz"
	entry .tablebox.horizhere -width 2 -bg white
	label .tablebox.vertspace -text "Vert"
	entry .tablebox.vertinhere -width 2 -bg white
	label .tablebox.height -text "Height"
	entry .tablebox.heightinhere -width 4 -bg white
	label .tablebox.width -text "Width"
	entry .tablebox.widthinhere -width 4 -bg white
	label .tablebox.bordo -text "Border"
	entry .tablebox.bordohere -width 2 -bg white
	label .tablebox.allinpixels -text "(all in pixels)"
	label .tablebox.cellpad -text "Space inside cells"
	entry .tablebox.padhere -width 2 -bg white
	label .tablebox.cellspace -text "Space between cells"
	entry .tablebox.spacehere -width 2 -bg white
	label .tablebox.tablecolor -text "Background color:"
	label .tablebox.colorcode -textvariable color
	button .tablebox.colorsel -text "Select color" -command {
		if { [string match $colorcall ""] == 0 } { set colorcall "" }
		colorbox
	}
	button .tablebox.colordesel -text "Deselect color" -command { set color "" }
	grid config .tablebox.withdata -row 0  -column 0 -columnspan 4 -sticky news
	grid config .tablebox.nodata -row 0  -column 4 -columnspan 4 -sticky news
	grid config .tablebox.cancel -row 0  -column 8 -columnspan 4 -sticky news
	grid config .tablebox.optinfo -row 1  -column 0 -columnspan 11 -sticky news
	grid config .tablebox.sum -row 2  -column 0  -columnspan 2 -sticky news
	grid config .tablebox.suminhere -row 2  -column 2 -columnspan 9  -sticky news
	grid config .tablebox.horspace -row 3  -column 0  -columnspan 2 -sticky news
	grid config .tablebox.horizhere -row 3  -column 2  -sticky news
	grid config .tablebox.vertspace -row 3  -column 3  -sticky news
	grid config .tablebox.vertinhere -row 3  -column 4  -sticky news
	grid config .tablebox.height -row 3  -column 5  -sticky news
	grid config .tablebox.heightinhere -row 3  -column 6  -sticky news
	grid config .tablebox.width -row 3  -column 7  -sticky news
	grid config .tablebox.widthinhere -row 3  -column 8  -sticky news
	grid config .tablebox.bordo -row 3  -column 9  -sticky news
	grid config .tablebox.bordohere -row 3  -column 10  -sticky news
	grid config .tablebox.cellpad -row 4  -column 0 -columnspan 2 -sticky news
	grid config .tablebox.padhere -row 4  -column 2  -sticky news
	grid config .tablebox.cellspace -row 4  -column 3 -columnspan 3 -sticky news
	grid config .tablebox.spacehere -row 4  -column 6  -sticky news
	grid config .tablebox.allinpixels -row 4  -column 7 -columnspan 4 -sticky news
	grid config .tablebox.tablecolor -row 5  -column 0 -columnspan 2 -sticky news
	grid config .tablebox.colorcode -row 5  -column 2 -columnspan 2 -sticky news
	grid config .tablebox.colorsel -row 5  -column 4 -columnspan 3 -sticky news
	grid config .tablebox.colordesel -row 5  -column 7 -columnspan 4 -sticky news
	bind .tablebox <Key-Return> { get_tablecodes ; databox ; destroy .tablebox	}
	focus .tablebox.suminhere
}

# Initialize variables for table attributes:
set tablesum ""
set table_hspace ""
set table_vspace ""
set tableheight ""
set tablewidth ""
set tablebordo ""
set cellpad ""
set cellspace ""
set tablecolor ""

# Procedure to get HTML codes for table attributes from user input:
proc get_tablecodes {} {
	global blankcols blankrows color tablecolor table_hspace table_vspace \
		tableheight tablewidth tablebordo cellpad cellspace tablesum
	set tablesum [.tablebox.suminhere get]
	set table_hspace [.tablebox.horizhere get]
	set table_vspace [.tablebox.vertinhere get]
	set tableheight [.tablebox.heightinhere get]
	set tablewidth [.tablebox.widthinhere get]
	set tablebordo [.tablebox.bordohere get]
	set cellpad [.tablebox.padhere get]
	set cellspace [.tablebox.spacehere get]
	set tablecolor $color
	if { [string match $tablecolor ""] == 0 } {
		set tablecolor " BGCOLOR=\"$tablecolor\""
	}
	if { [string match $tablesum ""] == 0 } {
		set tablesum " SUMMARY=\"$tablesum\""
	}
	if { [string match $table_hspace ""] == 0 } {
		set table_hspace " HSPACE=\"$table_hspace\""
	}
	if { [string match $table_vspace ""] == 0 } {
		set table_vspace " VSPACE=\"$table_vspace\""
	}
	if { [string match $tableheight ""] == 0 } {
		set tableheight " HEIGHT=\"$tableheight\"" 
	}
	if { [string match $tablewidth ""] == 0 } {
		set tablewidth " WIDTH=\"$tablewidth\""
	}
	if { [string match $tablebordo ""] == 0 } {
		set tablebordo " BORDER=\"$tablebordo\""
	}
	if { [string match $cellpad ""] == 0 } {
		set cellpad " CELLPADDING=\"$cellpad\""
	}
	if { [string match $cellspace ""] == 0 } {
		set cellspace " CELLSPACING=\"$cellspace\""
	}
}

# Initialize variables for row and cell attributes:
set horowalign LEFT
set vertrowalign MIDDLE
set horcellalign LEFT
set vertcellalign MIDDLE
set horowin ""
set vertrowin ""
set horcellin ""
set vertcellin ""
set rowspannum ""
set colspannum ""
set rowcolor ""
set cellcolor ""
set tableon 0

# Procedure to get HTML codes for row attributes from user input
# (LEFT and MIDDLE are defaults for horizontal and vertical alignment of contents):
proc get_rowcodes {} {
	global horowalign vertrowalign vertrowin horowin rowcolor
	if { [string match $horowalign LEFT] } {
		set horowin ""
	} else {
		set horowin " ALIGN=\"$horowalign\""
	}
	if { [string match $vertrowalign MIDDLE] } {
		set vertowin ""
	} else {
		set vertrowin " VALIGN=\"$vertrowalign\""
	}
	if { [string match $rowcolor ""] == 0 } {
		set rowcolor " BGCOLOR=\"$rowcolor\""
	}
}

# Procedure to get HTML codes for cell attributes from user input:
proc get_cellcodes {} {
	global colspannum rowspannum horcellalign vertcellalign \
		horcellin vertcellin cellcolor
	set rowspannum [.databox.rowspannum get]
	set colspannum [.databox.colspannum get]
	if { [string match $rowspannum ""] == 0 } {
		set rowspannum " ROWSPAN=\"$rowspannum\""
	}
	if { [string match $colspannum ""] == 0 } {
		set colspannum " COLUMNSPAN=\"$colspannum\""
	}
	if { [string match $horcellalign LEFT] } {
		set horcellin ""
	} else {
		set horcellin " ALIGN=\"$horcellalign\""
	}
	if { [string match $vertcellalign MIDDLE] } {
		set vertcellin ""
	} else {
		set vertcellin " VALIGN=\"$vertcellalign\""
	}
	if { [string match $cellcolor ""] == 0 } {
		set cellcolor " BGCOLOR=\"$cellcolor\""
	}
}

# Procedure to insert HTML codes for beginning of table:
proc make_table {} {
	global tablecolor table_hspace table_vspace horowin vertrowin rowcolor \
		tableheight tablewidth tablebordo cellpad cellspace tablesum
	.textarea insert insert "<TABLE$tablesum$tablecolor$table_hspace$table_vspace\
		$tableheight$tablewidth$tablebordo$cellpad$cellspace>\
		\n\t<TR$horowin$vertrowin$rowcolor>\n"
}

# Procedure to create HTML Table Data Entry box:
proc databox {} {
	global horowalign vertrowalign horcellalign vertcellalign colspannum rowspannum \
		color rowcolor cellcolor celltype colorcall
	toplevel .databox
	wm title .databox "HTML Table Data Entry"
	tk_setPalette background bisque selectBackground cyan
	label .databox.cellcont -text "Cell contents:"
	entry .databox.continhere -width 50 -bg white
	set celltype Header
	label .databox.celltype -text "Cell type:"
	tk_optionMenu .databox.cellmenu celltype Header Data
	label .databox.colspan -text "Column span:"
	entry .databox.colspannum -width 2 -bg white
	.databox.colspannum insert 0 $colspannum
	label .databox.rowspan -text "Row span:"
	entry .databox.rowspannum -width 2 -bg white
	.databox.rowspannum insert 0 $rowspannum
	button .databox.insert -text "Insert" -default active -command insert_cell
	button .databox.newrow -text "Begin new row" -default normal \
		-command newrow
	button .databox.done -text "Done" -default normal -command {
		if { $tableon == 1 } { .textarea insert insert "\t</TR>\n</TABLE>\n" }
		set tableon 0
		destroy .databox
	}
	label .databox.optinfo -text "O P T I O N A L   I N F O R M A T I O N :" -pady 4
	label .databox.rowalign -text "Align in row:"
	label .databox.horowalign -text "Horizontal" 
	tk_optionMenu .databox.horowmenu horowalign LEFT CENTER RIGHT
	label .databox.vertrowalign -text "Vertical"
	tk_optionMenu .databox.vertrowmenu vertrowalign \
		TOP MIDDLE BOTTOM BASELINE
	label .databox.cellalign -text "Align in cell:"
	label .databox.horcellalign -text "Horizontal" 
	tk_optionMenu .databox.horcellmenu horcellalign LEFT CENTER RIGHT
	label .databox.vertcellalign -text "Vertical"
	tk_optionMenu .databox.vertcellmenu vertcellalign \
		TOP MIDDLE BOTTOM BASELINE
	button .databox.rowcolorsel -text "Select row color" -command {
		set colorcall row ; colorbox
	}
	button .databox.cellcolorsel -text "Select cell color" -command {
		set colorcall cell ; colorbox
	}
	button .databox.rowcolordesel -text "Deselect row color" -command {
		set color "" ; set rowcolor ""
	}
	button .databox.cellcolordesel -text "Deselect cell color" -command {
		set color "" ; set cellcolor ""
	}
	grid config .databox.cellcont -row 0  -column 0 -sticky news
	grid config .databox.continhere -row 0  -column 1 -columnspan 8 -sticky news
	grid config .databox.celltype -row 1  -column 0  -sticky news
	grid config .databox.cellmenu -row 1  -column 1  -sticky news
	grid config .databox.colspan -row 1  -column 2  -columnspan 2 -sticky news
	grid config .databox.colspannum -row 1  -column 4  -sticky news
	grid config .databox.rowspan -row 1  -column 6  -columnspan 2 -sticky news
	grid config .databox.rowspannum -row 1 -column 8 -sticky news
	grid config .databox.insert -row 2  -column 0 -sticky news
	grid config .databox.newrow -row 2  -column 1 -columnspan 5 -sticky news
	grid config .databox.done -row 2  -column 6 -columnspan 3 -sticky news
	grid config .databox.optinfo -row 3  -column 0 -columnspan 9 -sticky news
	grid config .databox.rowalign -row 4 -column 0 -sticky news
	grid config .databox.horowalign -row 4  -column 1 -sticky news
	grid config .databox.horowmenu -row 4  -column 2 -sticky news
	grid config .databox.vertrowalign -row 4  -column 4 -columnspan 3 -sticky news
	grid config .databox.vertrowmenu -row 4  -column 7  -columnspan 2 -sticky news
	grid config .databox.cellalign -row 5  -column 0  -sticky news
	grid config .databox.horcellalign -row 5  -column 1  -sticky news
	grid config .databox.horcellmenu -row 5  -column 2  -sticky news
	grid config .databox.vertcellalign -row 5  -column 4 -columnspan 3 -sticky news
	grid config .databox.vertcellmenu -row 5 -column 7 -columnspan 2 -sticky news
	grid config .databox.rowcolorsel -row 6  -column 0 -columnspan 3 -sticky news
	grid config .databox.cellcolorsel -row 6  -column 3 -columnspan 6 -sticky news
	grid config .databox.rowcolordesel -row 7  -column 0 -columnspan 3 -sticky news
	grid config .databox.cellcolordesel -row 7  -column 3 -columnspan 6 -sticky news
	bind .databox <Key-Return> { insert_cell }
	focus .databox.continhere
}

# Procedure to insert new data cell in existing row of HTML table:
proc insert_cell {} {
	global codestart codend colspannum rowspannum horowin vertrowin \
		horcellin vertcellin rowcolor cellcolor celltype lineno tableon
	set cellcontents [.databox.continhere get]
	if { $tableon == 0 } {
		get_rowcodes
		get_cellcodes
		make_table
		set tableon 1	
	} else {
		get_cellcodes
	}
	if { [string match $celltype Header] } {
		set codestart \t\t<TH$colspannum$rowspannum$horcellin$vertcellin$cellcolor>
		set codend "</TH>\n"
	} else {
		set codestart \t\t<TD$colspannum$rowspannum$horcellin$vertcellin$cellcolor>
		set codend "</TD>\n"
	}
	dualcodes
	if { [string match $cellcontents "" ] == 0 } {
		.textarea insert insert $cellcontents
	}
	line_number
	set godownone [expr $lineno + 1]
	.textarea mark set insert $godownone.0
	.databox.continhere delete 0 end
	focus .databox.continhere
}

# Procedure to insert new row in HTML table with data contents:
proc newrow {} {
	global celltype horowin vertrowin rowcolor
	if { [string match $celltype Header] } { set celltype Data }
	get_rowcodes
	.textarea insert insert "\t</TR>\n\t<TR$horowin$vertrowin$rowcolor>\n"
}

set blankcols 2
set blankrows 2

# Procedure to create Blank HTML Table setup box:
proc nodatabox {} {
	global blankcols blankrows
	toplevel .nodatabox
	wm title .nodatabox "Blank HTML Table"
	tk_setPalette background bisque selectBackground cyan
	label .nodatabox.blankcols -text "Columns:"
	entry .nodatabox.colsinhere -width 2 -bg white
	.nodatabox.colsinhere insert 0 $blankcols
	label .nodatabox.blankrows -text "Rows:"
	entry .nodatabox.rowsinhere -width 3 -bg white
	.nodatabox.rowsinhere insert 0 $blankrows
	button .nodatabox.maketable -text "Make table" -default active -command {
		nodata_table ; destroy .nodatabox
	}
	button .nodatabox.cancel -text "Cancel" -default normal -command {
		destroy .nodatabox
	}
	grid config .nodatabox.blankcols -row 0  -column 0  -sticky news
	grid config .nodatabox.colsinhere -row 0  -column 1  -sticky news
	grid config .nodatabox.blankrows -row 0  -column 2  -sticky news
	grid config .nodatabox.rowsinhere -row 0  -column 3  -sticky news
	grid config .nodatabox.maketable -row 1  -column 0 -columnspan 2 -sticky news
	grid config .nodatabox.cancel -row 1  -column 2 -columnspan 2 -sticky news
	bind .nodatabox <Key-Return> { nodata_table ; destroy .nodatabox }
	focus .nodatabox.colsinhere
}

# Procedure to make blank row for HTML table, with number of columns set by user:
proc ablankrow {} {
	global blankcols horowin vertrowin colspannum rowspannum horcellin vertcellin
	.textarea insert insert "\t<TR$horowin$vertrowin>\n"
	for { set i 0 } { $i < $blankcols } { incr i } {
		.textarea insert insert "\t\t<TD$colspannum$rowspannum\
			$horcellin$vertcellin></TD>\n"
	}
	.textarea insert insert "\t</TR>\n"
}

# Procedure to create blank HTML table, with number of rows and columns set by user:
proc nodata_table {} {
	global blankcols blankrows color tablecolor table_hspace table_vspace \
		tableheight tablewidth tablebordo cellpad cellspace tablesum
	set blankcols [.nodatabox.colsinhere get]
	set blankrows [.nodatabox.rowsinhere get]
	.textarea insert insert "<TABLE$tablesum$tablecolor$table_hspace$table_vspace\
		$tableheight$tablewidth$tablebordo$cellpad$cellspace>\n"
	for { set i 0 } { $i < $blankrows } { incr i } { ablankrow }
	.textarea insert insert "</TABLE>\n"
	savecheck
}

.filemenu.html add separator

# HTML -- Paragraph

.filemenu.html add command -label "Paragraph <P>" -underline 0 -command {
	set codestart <P>
	set codend </P>
	dualcodes
	} -accelerator F1

bind . <F1> {
	set codestart <P>
	set codend </P>
	dualcodes
	}

# HTML -- Line Break

.filemenu.html add command -label "Line Break <BR>" -underline 0 -command {
	.textarea insert insert "<BR>"
	savecheck
	} -accelerator F9

bind . <F9> {
	.textarea insert insert "<BR>"
	savecheck
	}

# HTML -- Emphasis

.filemenu.html add command -label "Italics <EM>" -underline 0 -command {
	set codestart <EM>
	set codend </EM>
	dualcodes
	} -accelerator F8

bind . <F8> {
	set codestart <EM>
	set codend </EM>
	dualcodes
	}

# HTML -- Strong

.filemenu.html add command -label "Bold <STRONG>" -underline 0 -command {
	set codestart <STRONG>
	set codend </STRONG>
	dualcodes
	} -accelerator F6

bind . <F6> {
	set codestart <STRONG>
	set codend </STRONG>
	dualcodes
	}

# HTML -- Center

.filemenu.html add command -label "Center <CENTER>" -underline 5 -command {
	set codestart <CENTER>
	set codend </CENTER>
	dualcodes
	} -accelerator Shift+F6

bind . <Shift-F6> {
	set codestart <CENTER>
	set codend </CENTER>
	dualcodes
}
